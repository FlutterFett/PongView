package com.neumont.csc150.PongView;

import java.awt.Color;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JButton;
import javax.swing.JOptionPane;

public class PongGUI extends JPanel implements IPongGUI{
	private static final long serialVersionUID = 1L;
	private static final int LEFT_PADDLE = 14; // generic values, use these to place paddles
	private static final int RIGHT_PADDLE = 339;
	private static final int TOP_OF_PANEL = 0;
	private static final int BOTTOM OF PANEL = 499;
	private JFrame frame;
	private JPanel panel;
	public static Paddle paddle;

	public static void main(String[] args) { }
	
	public void initGUI(){
		this.frame = new JFrame("PONG");
		this.panel = new JPanel();
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().add(panel);
		frame.setVisible(true);
		frame.pack();
		frame.setSize(1000, 800);
		frame.setLocationRelativeTo(null);
		panel.setBackground(Color.BLACK);
		createMainMenu(this.frame, this.panel);
		}

	@Override
	public void createMainMenu() {
		JButton start = new JButton("Start");
		start.addActionListener(new ActionListener(){
		
			@Override
			public void actionPerformed(ActionEvent e) {
				JOptionPane.showMessageDialog(frame, "Hi.");
			}
		});
		this.panel.add(start);

	}

	@Override
	public void updateGame() {
		// TODO Auto-generated method stub

	}

	@Override
	public void displayMessage(String message) {
		// TODO Auto-generated method stub

	}
	
	public void moveBall() {
		ball.setX((ball.getX() + ball.getXTraverse()) * ballXMod);
		ball.setY((ball.getY() + ball.getYTraverse()) * ballYMod);
	}

	public void checkCollision() {
		if (ball.getYCoordinate() <= TOP_OF_PANEL || ball.getYCoordinate() >= BOTTOM_OF_PANEL) {
			this.ballHitsBorder();
		}
		if (checkLeftPaddle() || ball.getXCoordinate() >= RIGHT_PADDLE) {
			this.ballHitsPaddle();
		}
	}

	public boolean checkLeftPaddle() {
		int x = ball.getXCoordinate();
		int y = ball.getYCoordinate();

		if (x <= LEFT_PADDLE) { // static values necessary for the generation of the game in the GUI
			if (y >= paddle1.getTopCoordinate() && y <= paddle1.getBottomCoordinate()) {
				return true;
			}
		}
		return false;
	}

	public boolean checkRightPaddle() {
		int x = ball.getXCoordinate();
		int y = ball.getYCoordinate();

		if (x >= IPongGUI.RIGHT_PADDLE) { // static values necessary for the generation of the game in the GUI
			if (y >= paddle2.getTopCoordinate() && y <= paddle1.getBottomCoordinate()) {
				return true;
			}
		}
		return false;
	}

	public void ballHitsPaddle() {
		ballXMod *= -1;
		ball.setXTraverse(ball.getXTraverse() + 1);
		ball.setYTraverse(ball.getYTraverse() + 1);
	}

	public void ballHitsBorder() {
		ballYMod *= -1;
		ball.setXTraverse(ball.getXTraverse() + 1);
		ball.setYTraverse(ball.getYTraverse() + 1);
	}
	
}
